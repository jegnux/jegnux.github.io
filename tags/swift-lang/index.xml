<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swift-lang on ✨ Elegant Swift</title>
    <link>http://elegantswift.com/tags/swift-lang/</link>
    <description>Recent content in Swift-lang on ✨ Elegant Swift</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 Jan 2018 01:40:45 +0100</lastBuildDate>
    
    <atom:link href="http://elegantswift.com/tags/swift-lang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Equatable on Enum Associated Values</title>
      <link>http://elegantswift.com/posts/equatable-on-enum-associated-values/</link>
      <pubDate>Sun, 14 Jan 2018 01:40:45 +0100</pubDate>
      
      <guid>http://elegantswift.com/posts/equatable-on-enum-associated-values/</guid>
      <description>

&lt;h1 id=&#34;the-problem&#34;&gt;The problem&lt;/h1&gt;

&lt;p&gt;While I was reading Twitter, I came across this good question from &lt;a href=&#34;https://twitter.com/Cocoanetics&#34;&gt;@Cocoanetics&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Is there a better way to make an enum with associated values equatable? &lt;a href=&#34;https://t.co/rio4NcRXFc&#34;&gt;pic.twitter.com/rio4NcRXFc&lt;/a&gt;&lt;/p&gt;&amp;mdash; Cocoanetics  (@Cocoanetics) &lt;a href=&#34;https://twitter.com/Cocoanetics/status/800653458365939713?ref_src=twsrc%5Etfw&#34;&gt;November 21, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;


&lt;hr /&gt;

&lt;p&gt;Most of responses were pure technical (but still valid) answers. In short:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;you can use a switch to have clearer code, but you still need the same logic&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Maybe. But the logic above feels wrong to me because it tries to make two different cases equatable just because they have the same associated value. That&amp;rsquo;s semantically incorrect. With a such implementation the following code would return &lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;;border-spacing:0;padding:0;margin:0;border:0;width:100%;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;.afterID(&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;) == .beforeID(&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;No difficulty here to understand that this can become a source of bugs. Especially with indirect uses of Equatable, like a Collection&amp;rsquo;s &lt;code&gt;contains()&lt;/code&gt; func for example.&lt;/p&gt;

&lt;p&gt;How could we make a more elegant implementation of Equatable with this two requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2 different &lt;code&gt;cases&lt;/code&gt; &lt;strong&gt;can’t&lt;/strong&gt; be equal&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.afterID&lt;/code&gt; and &lt;code&gt;.beforeID&lt;/code&gt; associated identifiers equality &lt;strong&gt;must&lt;/strong&gt; be easy and straightforward to check.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;a-simple-solution&#34;&gt;A simple solution&lt;/h1&gt;

&lt;p&gt;An easy first attempt could be to perform a strict equality check on cases, and use an &lt;code&gt;identifier&lt;/code&gt; property to check identifiers equality:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;;border-spacing:0;padding:0;margin:0;border:0;width:100%;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 6&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 7&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 8&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 9&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;14&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;QueryFilter&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; noFilter
  &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; afterID(Int)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; beforeID(Int)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; offset(Int)

  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; identifier: Int? {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;self&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; .afterID(&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; id), .beforeID(&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; id):
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; id
    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; .noFilter, .offset:
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;;border-spacing:0;padding:0;margin:0;border:0;width:100%;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 6&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 7&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 8&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 9&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;17&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;19&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;20&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;extension&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;QueryFilter&lt;/span&gt;: Equatable {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; == (lhs: QueryFilter, rhs: QueryFilter) -&amp;gt; Bool {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (lhs, rhs) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; (.noFilter, .noFilter):
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; (.afterID(_id), .afterID(id)):
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _id == id

    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; (.beforeID(_id), .beforeID(id)):
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _id == id

    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; (.offset(_offset), .offset(offset)):
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _offset == offset

    &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;:
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Here how it works:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;;border-spacing:0;padding:0;margin:0;border:0;width:100%;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 6&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 7&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 8&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 9&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;11&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;QueryFilter.afterID(&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;) == QueryFilter.afterID(&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;// true&lt;/span&gt;

QueryFilter.afterID(&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;) == QueryFilter.afterID(&lt;span style=&#34;color:#ae81ff&#34;&gt;1337&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;// false, identifiers are different&lt;/span&gt;

QueryFilter.afterID(&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;) == QueryFilter.beforeID(&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;// false, cases are different&lt;/span&gt;

QueryFilter.afterID(&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;).identifier == QueryFilter.beforeID(&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;).identifier
&lt;span style=&#34;color:#75715e&#34;&gt;// true, we don&amp;#39;t care about the case, we just compare identifiers&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;But the problem is that it can lead to strange results:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;;border-spacing:0;padding:0;margin:0;border:0;width:100%;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;QueryFilter.noFilter.identifier == QueryFilter.offset(&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;).identifier
&lt;span style=&#34;color:#75715e&#34;&gt;// true, nil == nil is true 😒&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Can we fix this?&lt;br/&gt;
&lt;strong&gt;Yes&lt;/strong&gt;. Have you ever heard about indirect enums? 😏&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;an-elegant-solution&#34;&gt;An elegant solution&lt;/h1&gt;

&lt;p&gt;An indirect case allows you to make a &amp;ldquo;recursive&amp;rdquo; enum by associating a case to another case of the same enum.&lt;/p&gt;

&lt;p&gt;But how this could solve our problem? It’s quite simple: instead of having identifier being an Int?, this var can be itself a &lt;code&gt;QueryFilter&lt;/code&gt; with an indirect case shadowing the original &lt;code&gt;QueryFilter&lt;/code&gt; case.&lt;/p&gt;

&lt;p&gt;This way, we can make a specific rule for shadowed cases in our &lt;code&gt;==&lt;/code&gt; implementation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;;border-spacing:0;padding:0;margin:0;border:0;width:100%;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 6&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 7&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 8&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 9&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;17&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;QueryFilter&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; noFilter
  &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; afterID(Int)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; beforeID(Int)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; offset(Int)

  &lt;span style=&#34;color:#75715e&#34;&gt;// This will shadow one of above cases&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;indirect&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; value(QueryFilter)

  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; value: QueryFilter {
     &lt;span style=&#34;color:#75715e&#34;&gt;// Avoid `.value(_)` shadowing&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; .value(&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;) = &lt;span style=&#34;color:#66d9ef&#34;&gt;self&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;self&lt;/span&gt; }

    &lt;span style=&#34;color:#75715e&#34;&gt;// Shadow original case (self) in an `value(_)` case&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; .value(&lt;span style=&#34;color:#66d9ef&#34;&gt;self&lt;/span&gt;)
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;;border-spacing:0;padding:0;margin:0;border:0;width:100%;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 6&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 7&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 8&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 9&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;17&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;19&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;21&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;22&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;23&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;24&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;25&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;26&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;27&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;28&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;29&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;33&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;34&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;35&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;36&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;37&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;38&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;39&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;40&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;41&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;42&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;43&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;44&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;45&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;46&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;47&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;48&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;49&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;51&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;extension&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;QueryFilter&lt;/span&gt;: Equatable {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; == (lhs: QueryFilter, rhs: QueryFilter) -&amp;gt; Bool {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (lhs, rhs) {

    &lt;span style=&#34;color:#75715e&#34;&gt;// Nothing change for basic cases. We make a strict equality check&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; (.noFilter, .noFilter):
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; (.afterID(_id), .afterID(id)):
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _id == id

    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; (.beforeID(_id), .beforeID(id)):
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _id == id

    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; (.offset(_offset), .offset(offset)):
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _offset == offset

    &lt;span style=&#34;color:#75715e&#34;&gt;// But we allow comparison between .beforeID(_) and .afterID(_) values&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// if they shadowed by a .value(_) case&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; (.value(lhs), .value(rhs)):

      &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (lhs.original, rhs.original) {

      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; (.beforeID(_id), .afterID(id)):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _id == id

      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; (.afterID(_id), .beforeID(id)):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _id == id

      &lt;span style=&#34;color:#75715e&#34;&gt;// If it&amp;#39;s not a comparison between .beforeID(_) and .afterID(_)&lt;/span&gt;
      &lt;span style=&#34;color:#75715e&#34;&gt;// we fallback on the classic equality check.&lt;/span&gt;

      &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lhs == rhs
      }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;:
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
    }
  }

  &lt;span style=&#34;color:#75715e&#34;&gt;// This recursively get the original shadowed value even if you do somwthing like :&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;// let query = QueryFilter.value(.value(.value(.afterID(42))))&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; original: QueryFilter {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; .value(queryFilter) = &lt;span style=&#34;color:#66d9ef&#34;&gt;self&lt;/span&gt; {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; queryFilter.original
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;self&lt;/span&gt;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Does it work well? Hell yes! 😈&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;;border-spacing:0;padding:0;margin:0;border:0;width:100%;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 6&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 7&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 8&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt; 9&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;17&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;19&lt;/span&gt;&lt;span style=&#34;color:#7c7c79;margin-right:0.4em;padding:00.4em00.4em;display:block;&#34;&gt;20&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;QueryFilter.noFilter == QueryFilter.offset(&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;// false&lt;/span&gt;

QueryFilter.afterID(&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;) == QueryFilter.afterID(&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;// true&lt;/span&gt;

QueryFilter.afterID(&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;) == QueryFilter.afterID(&lt;span style=&#34;color:#ae81ff&#34;&gt;1337&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;// false&lt;/span&gt;

QueryFilter.afterID(&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;) == QueryFilter.beforeID(&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;// false&lt;/span&gt;

QueryFilter.noFilter.value == QueryFilter.offset(&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;).value
&lt;span style=&#34;color:#75715e&#34;&gt;// false&lt;/span&gt;

QueryFilter.afterID(&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;).value == QueryFilter.afterID(&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;).value
&lt;span style=&#34;color:#75715e&#34;&gt;// true&lt;/span&gt;

QueryFilter.afterID(&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;).value == QueryFilter.beforeID(&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;).value
&lt;span style=&#34;color:#75715e&#34;&gt;// true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;This post was initially &lt;a href=&#34;https://medium.com/@jegnux/on-swift-enums-with-associated-value-equality-e815a768d9b0&#34;&gt;posted on medium&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>